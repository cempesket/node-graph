type Query {
    info: String!
    feed(filter:String, orderBy: VoteOrderByInput,skip: Int, first: Int): [Link!]!
    votes: [Vote]!
    link: Link
}

type Mutation {
    postLink(url: String!, description: String!): Link!
    updateLink(id: ID!,url: String, description: String): Link!
    deleteLink(id: ID!): Link!
    createVote(linkId:ID!): Vote!
    signup(name: String!, email: String!, password: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
}
enum VoteOrderByInput {
    id_ASC
    id_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type Link {
    id: ID
    description: String
    url: String
    author: User!
    createdAt: String
    votes: [Vote!]

}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
    createdAt: String
}
type AuthPayload {
    token: String!
    user: User!
}

type Vote {
    link: Link!
    user: User!
    createdAt: String
}